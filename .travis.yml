sudo: required
dist: trusty
os: linux
language: minimal
cache:
  directories:
  - depends/built
  - depends/sdk-sources
  - $HOME/.ccache
git:
  depth: false
env:
  global:
    - MAKEJOBS=-j3
    - RUN_TESTS=false
    - CHECK_DOC=0
    - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID
    - CCACHE_SIZE=200M
    - CCACHE_TEMPDIR=/tmp/.ccache-temp
    - CCACHE_COMPRESS=1
    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out
    - SDK_URL=https://bitcoincore.org/depends-sources/sdks
    - WINEDEBUG=fixme-all
  matrix:
# ARM
    - HOST=arm-linux-gnueabihf NAME="arm-linux-gnueabihf" PACKAGES="g++-arm-linux-gnueabihf" DEP_OPTS="NO_QT=1" GOAL="install" BITCOIN_CONFIG="--enable-glibc-back-compat --enable-reduce-exports"
# Win32
#    - HOST=i686-w64-mingw32 NAME="win32" DPKG_ADD_ARCH="i386" DEP_OPTS="NO_QT=0" PACKAGES="python3 python3-dev python3-pip nsis g++-mingw-w64-i686 wine1.6 bc qtbase5-dev 
#  qttools5-dev-tools" RUN_TESTS=false GOAL="deploy" BITCOIN_CONFIG="--enable-gui --enable-reduce-exports"
# Win32
#    - HOST=i686-w64-mingw32 NAME="win32" DPKG_ADD_ARCH="i386" DEP_OPTS="NO_QT=0" PACKAGES="python3-zmq libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libdb5.1++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev xvfb python3 python3-dev python3-pip nsis g++-mingw-w64-i686 wine1.6 bc qtbase5-dev qttools5-dev-tools" RUN_TESTS=false GOAL="deploy" BITCOIN_CONFIG="--enable-zmq --with-incompatible-bdb --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports"
# 32-bit + dash
    - HOST=i686-pc-linux-gnu NAME="i686-pc-linux-gnu" PACKAGES="g++-multilib python3-zmq" DEP_OPTS="NO_QT=1" RUN_TESTS=false GOAL="install" BITCOIN_CONFIG="--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++" USE_SHELL="/bin/dash"
# Qt5 & system libs
    - HOST=x86_64-unknown-linux-gnu NAME="x86_64-linux-gnu_qt5_with-libs" PACKAGES="python3-dev python3-pip libdbus-1-dev libharfbuzz-dev python3-zmq qtbase5-dev qttools5-dev-tools libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libdb5.1++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev xvfb" NO_DEPENDS=1 NEED_XVFB=1 RUN_TESTS=false GOAL="install" BITCOIN_CONFIG="--enable-zmq --with-gui=qt5 --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --enable-sse2 CPPFLAGS=-DDEBUG_LOCKORDER"
# Win64
#    - HOST=x86_64-w64-mingw32 NAME="win64" DPKG_ADD_ARCH="i386" DEP_OPTS="NO_QT=0" PACKAGES="python3 python3-dev python3-pip nsis g++-mingw-w64-x86-64 wine1.6 bc qtbase5-dev qttools5-dev-tools" RUN_TESTS=false GOAL="deploy" BITCOIN_CONFIG="--enable-gui --enable-reduce-exports --enable-sse2"
# x86_64 Linux (uses qt5 dev package instead of depends Qt to speed up build and avoid timeout)
    - HOST=x86_64-unknown-linux-gnu NAME="x86_64-linux-gnu_qt5-dev" PACKAGES="python3-zmq python3-dev python3-pip qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev" DEP_OPTS="NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1" RUN_TESTS=false GOAL="install" BITCOIN_CONFIG="--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-sse2 CPPFLAGS=-DDEBUG_LOCKORDER"
# x86_64 Linux, No wallet
    - HOST=x86_64-unknown-linux-gnu NAME="x86_64-linux-gnu_no-wallet" PACKAGES="python3 python3-dev python3-pip" DEP_OPTS="NO_WALLET=1" RUN_TESTS=false GOAL="install" BITCOIN_CONFIG="--enable-glibc-back-compat --enable-reduce-exports --enable-sse2"
# Cross-Mac
#    - HOST=x86_64-apple-darwin14 NAME="osx64" PACKAGES="cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev python3-setuptools-git" BITCOIN_CONFIG="--enable-gui --enable-reduce-exports --enable-werror --enable-sse2" OSX_SDK=10.11 GOAL="deploy"
before_install:
    - export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
install:
    - if [ -n "$DPKG_ADD_ARCH" ]; then sudo dpkg --add-architecture "$DPKG_ADD_ARCH" ; fi
    - if [ -n "$PACKAGES" ]; then travis_retry sudo apt-get update; fi
    - if [ -n "$PACKAGES" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi
    - if [ "$CHECK_DOC" = 1 -a "$TRAVIS_EVENT_TYPE" = "pull_request" ]; then travis_retry pip3 install flake8 --user; fi
before_script:
    - if [ "$CHECK_DOC" = 1 -a "$TRAVIS_EVENT_TYPE" = "pull_request" ]; then contrib/devtools/commit-script-check.sh $TRAVIS_COMMIT_RANGE; fi
    - if [ "$CHECK_DOC" = 1 ]; then contrib/devtools/git-subtree-check.sh src/crypto/ctaes; fi
    - if [ "$CHECK_DOC" = 1 ]; then contrib/devtools/git-subtree-check.sh src/secp256k1; fi
    - if [ "$CHECK_DOC" = 1 ]; then contrib/devtools/git-subtree-check.sh src/univalue; fi
    - if [ "$CHECK_DOC" = 1 ]; then contrib/devtools/git-subtree-check.sh src/leveldb; fi
    - if [ "$CHECK_DOC" = 1 ]; then contrib/devtools/check-doc.py; fi
    - if [ "$CHECK_DOC" = 1 ]; then contrib/devtools/check-rpc-mappings.py .; fi
    - unset CC; unset CXX
    - mkdir -p depends/SDKs depends/sdk-sources
    - if [ -n "$OSX_SDK" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi
    - if [ -n "$OSX_SDK" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi
    - if [ -z "$NO_DEPENDS" ]; then make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS; fi
    # Start xvfb if needed, as documented at https://docs.travis-ci.com/user/gui-and-headless-browsers/#Using-xvfb-to-Run-Tests-That-Require-a-GUI
    - if [ "$NEED_XVFB" = 1 ]; then export DISPLAY=:99.0; /sbin/start-stop-daemon --start --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac; fi
script:
    - if [ "$CHECK_DOC" = 1 -a "$TRAVIS_REPO_SLUG" = "LIMXTEC/BitCore" -a "$TRAVIS_PULL_REQUEST" = "false" ]; then while read LINE; do travis_retry gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi
    - if [ "$CHECK_DOC" = 1 -a "$TRAVIS_REPO_SLUG" = "LIMXTEC/BitCore" -a "$TRAVIS_PULL_REQUEST" = "false" ]; then contrib/verify-commits/verify-commits.sh; fi
    - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`
    - if [ -n "$USE_SHELL" ]; then export CONFIG_SHELL="$USE_SHELL"; fi
    - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST
    - BITCOIN_CONFIG_ALL="--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib"
    - if [ -z "$NO_DEPENDS" ]; then depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE; fi
    - test -n "$USE_SHELL" && eval '"$USE_SHELL" -c "./autogen.sh"' || ./autogen.sh
    - mkdir build
    - cd build || (echo "could not enter build directory"; exit 1)
    - ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false )
    - make distdir VERSION=$HOST
    - cd "bitcore-$HOST" || (echo "could not enter distdir bitcore-$HOST"; exit 1)
    - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false )
    - make $MAKEJOBS $GOAL || ( "Build failure. Verbose build follows." && make $GOAL V=1 ; false )
    - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib
    - if [ "$RUN_TESTS" = "true" ]; then travis_wait 50 make $MAKEJOBS check VERBOSE=1; fi
    - if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then extended="--extended --exclude feature_pruning,feature_dbcrash"; fi
    - if [ "$RUN_TESTS" = "true" ]; then test/functional/test_runner.py --combinedlogslen=4000 --coverage --quiet --failfast ${extended}; fi
# ARM    
    - if [ "$NAME" = "arm-linux-gnueabihf" ]; then cd $OUTDIR; tar -czf bitcore-$TRAVIS_TAG-$NAME.tar.gz -C $OUTDIR bin lib; sha256sum bitcore-$TRAVIS_TAG-$NAME.tar.gz > bitcore-$TRAVIS_TAG-$NAME.tar.gz.sha256.txt; fi
# Win32
    - if [ "$NAME" = "win32" ]; then mkdir -p $OUTDIR; zip -r bitcore-$NAME-$TRAVIS_TAG-$NAME.zip ./src/*.exe; cp bitcore-$NAME-$TRAVIS_TAG-$NAME.zip $OUTDIR; sha256sum bitcore-$TRAVIS_TAG-$NAME.zip > bitcore-$TRAVIS_TAG-$NAME.zip.sha256.txt; fi
# 32-bit + dash   
    - if [ "$NAME" = "i686-pc-linux-gnu" ]; then cd $OUTDIR; tar -czf bitcore-$TRAVIS_TAG-$NAME.tar.gz -C $OUTDIR bin lib; sha256sum bitcore-$TRAVIS_TAG-$NAME.tar.gz > bitcore-$TRAVIS_TAG-$NAME.tar.gz.sha256.txt; fi
# Qt5 & system libs
    - if [ "$NAME" = "x86_64-linux-gnu_qt5_with-libs" ]; then cd $OUTDIR; tar -czf bitcore-$TRAVIS_TAG-$NAME.tar.gz -C $OUTDIR bin lib; sha256sum bitcore-$TRAVIS_TAG-$NAME.tar.gz > bitcore-$TRAVIS_TAG-$NAME.tar.gz.sha256.txt; fi
# Win64
    - if [ "$NAME" = "win64" ]; then mkdir -p $OUTDIR; zip -r bitcore-$NAME-$TRAVIS_TAG-$NAME.zip ./src/*.exe; cp bitcore-$NAME-$TRAVIS_TAG-$NAME.zip $OUTDIR; sha256sum bitcore-$TRAVIS_TAG-$NAME.zip > bitcore-$TRAVIS_TAG-$NAME.zip.sha256.txt; fi
# x86_64 Linux (uses qt5 dev package instead of depends Qt to speed up build and avoid timeout)
    - if [ "$NAME" = "x86_64-linux-gnu_qt5-dev" ]; then cd $OUTDIR; tar -czf bitcore-$TRAVIS_TAG-$NAME.tar.gz -C $OUTDIR bin lib; sha256sum bitcore-$TRAVIS_TAG-$NAME.tar.gz > bitcore-$TRAVIS_TAG-$NAME.tar.gz.sha256.txt; fi
# x86_64 Linux, No wallet
    - if [ "$NAME" = "x86_64-linux-gnu_no-wallet" ]; then cd $OUTDIR; tar -czf bitcore-$TRAVIS_TAG-$NAME.tar.gz -C $OUTDIR bin lib; sha256sum bitcore-$TRAVIS_TAG-$NAME.tar.gz > bitcore-$TRAVIS_TAG-$NAME.tar.gz.sha256.txt; fi
# Cross-Mac
    - if [ "$NAME" = "osx64" ]; then mkdir -p $OUTDIR; cp BitCore-BTX.dmg $OUTDIR/bitcore-$TRAVIS_TAG-$NAME.dmg; sha256sum bitcore-$TRAVIS_TAG-$NAME.dmg > bitcore-$TRAVIS_TAG-$NAME.dmg.sha256.txt; fi

    - pwd
    - ls ./*
    - ls ./*/*
    - ls ..
    - ls $BASE_OUTDIR/**/*
after_script:
    - echo $TRAVIS_COMMIT_RANGE
    - echo $TRAVIS_COMMIT_LOG
deploy:
  provider: releases
  api_key:
    secure: 4f:cb:e6:2b:7f:c6:a8:62:b3:e0:38:bd:00:c6:2e:08 #TODO
  file_glob: true
  file:
    - $OUTDIR/*.tar.gz
    - $OUTDIR/*.tar.gz.sha256.txt
    - $OUTDIR/*.zip
    - $OUTDIR/*.zip.sha256.txt
    - $OUTDIR/*.dmg
    - $OUTDIR/*.dmg.sha256.txt
  skip_cleanup: true 
  on:
    tags: true
